"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var userDao_1 = require("../daos/userDao");
var UserRouter = /** @class */ (function () {
    function UserRouter() {
        this.userDao = new userDao_1.UserDao();
    }
    UserRouter.create = function (router) {
        //log
        console.log("[UserRoute::create] Creating UserRoute route.");
        //add getAll route
        router.get("/users", function (req, res, next) {
            new UserRouter().getAll(req, res, next);
        });
        // add getOne route
        router.get("/users/:userID", function (req, res, next) {
            new UserRouter().getOne(req, res, next);
        });
    };
    /**
     * GET all users.
     */
    UserRouter.prototype.getAll = function (req, res, next) {
        this.userDao.getAllUsers()
            .then(function (users) {
            // now we can do something with users
            if (users != undefined) {
                res.status(200)
                    .send({
                    message: 'Success',
                    status: res.status,
                    users: users
                });
            }
            else {
                res.status(5000)
                    .send({
                    message: 'Failure',
                    status: res.status,
                });
            }
        })
            .catch(function (err) {
            console.log("err.message");
        });
    };
    /**
     * GET one user by id.
     */
    UserRouter.prototype.getOne = function (req, res, next) {
        // Pull the requested id out. (ex. if the url is .../users/<userID> then query = <userID>)
        var query = req.params.userID;
        // Send the query to the userDao
        this.userDao.getUser(query)
            .then(function (user) {
            // Now we can do something with user
            if (user) {
                res.status(200)
                    .send({
                    message: 'Success',
                    status: res.status,
                    user: user
                });
            }
            else {
                res.status(404)
                    .send({
                    message: 'No hero found with the given id.',
                    status: res.status
                });
            }
        })
            .catch(function (err) {
            console.log("err.message");
        });
    };
    return UserRouter;
}());
exports.UserRouter = UserRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlclJvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvdXNlclJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUF5QztBQUV6QztJQW1CSTtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQWpCYSxpQkFBTSxHQUFwQixVQUFxQixNQUFjO1FBQy9CLEtBQUs7UUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFFN0Qsa0JBQWtCO1FBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtZQUNqRSxJQUFJLFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CO1FBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1lBQ3pFLElBQUksVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBTUQ7O09BRUc7SUFDSSwyQkFBTSxHQUFiLFVBQWMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUV6RCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTthQUNyQixJQUFJLENBQUMsVUFBQyxLQUFXO1lBQ2QscUNBQXFDO1lBQ3JDLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtnQkFDcEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7cUJBQ1YsSUFBSSxDQUFDO29CQUNGLE9BQU8sRUFBRSxTQUFTO29CQUNsQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07b0JBQ2xCLEtBQUssT0FBQTtpQkFDUixDQUFDLENBQUM7YUFDVjtpQkFBTTtnQkFDSCxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztxQkFDWCxJQUFJLENBQUM7b0JBQ0YsT0FBTyxFQUFFLFNBQVM7b0JBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTtpQkFDckIsQ0FBQyxDQUFDO2FBQ1Y7UUFDTCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxHQUFTO1lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFRDs7T0FFRztJQUNJLDJCQUFNLEdBQWIsVUFBYyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQ3pELDBGQUEwRjtRQUMxRixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUU5QixnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ3RCLElBQUksQ0FBQyxVQUFDLElBQVU7WUFDYixvQ0FBb0M7WUFDcEMsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7cUJBQ1YsSUFBSSxDQUFDO29CQUNGLE9BQU8sRUFBRSxTQUFTO29CQUNsQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07b0JBQ2xCLElBQUksTUFBQTtpQkFDUCxDQUFDLENBQUM7YUFDVjtpQkFBTTtnQkFDSCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztxQkFDVixJQUFJLENBQUM7b0JBQ0YsT0FBTyxFQUFFLGtDQUFrQztvQkFDM0MsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO2lCQUNyQixDQUFDLENBQUM7YUFDVjtRQUNMLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFDLEdBQVM7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0FBQyxBQWpGRCxJQWlGQztBQWpGWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9ufSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFVzZXJEYW8gfSBmcm9tIFwiLi4vZGFvcy91c2VyRGFvXCJcblxuZXhwb3J0IGNsYXNzIFVzZXJSb3V0ZXIge1xuICAgIC8vIHVzZWQgdG8gYWNjZXNzIGRhdGFiYXNlXG4gICAgcHJpdmF0ZSB1c2VyRGFvIDogVXNlckRhbztcblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHJvdXRlcjogUm91dGVyKSB7XG4gICAgICAgIC8vbG9nXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1VzZXJSb3V0ZTo6Y3JlYXRlXSBDcmVhdGluZyBVc2VyUm91dGUgcm91dGUuXCIpO1xuXG4gICAgICAgIC8vYWRkIGdldEFsbCByb3V0ZVxuICAgICAgICByb3V0ZXIuZ2V0KFwiL3VzZXJzXCIsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgICAgICAgICAgbmV3IFVzZXJSb3V0ZXIoKS5nZXRBbGwocmVxLCByZXMsIG5leHQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgZ2V0T25lIHJvdXRlXG4gICAgICAgIHJvdXRlci5nZXQoXCIvdXNlcnMvOnVzZXJJRFwiLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIG5ldyBVc2VyUm91dGVyKCkuZ2V0T25lKHJlcSwgcmVzLCBuZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudXNlckRhbyA9IG5ldyBVc2VyRGFvKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR0VUIGFsbCB1c2Vycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QWxsKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG5cbiAgICAgICAgdGhpcy51c2VyRGFvLmdldEFsbFVzZXJzKClcbiAgICAgICAgICAgIC50aGVuKCh1c2VycyA6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIG5vdyB3ZSBjYW4gZG8gc29tZXRoaW5nIHdpdGggdXNlcnNcbiAgICAgICAgICAgICAgICBpZiAodXNlcnMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRmFpbHVyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyIDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnIubWVzc2FnZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdFVCBvbmUgdXNlciBieSBpZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0T25lKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIFB1bGwgdGhlIHJlcXVlc3RlZCBpZCBvdXQuIChleC4gaWYgdGhlIHVybCBpcyAuLi4vdXNlcnMvPHVzZXJJRD4gdGhlbiBxdWVyeSA9IDx1c2VySUQ+KVxuICAgICAgICBsZXQgcXVlcnkgPSByZXEucGFyYW1zLnVzZXJJRDtcblxuICAgICAgICAvLyBTZW5kIHRoZSBxdWVyeSB0byB0aGUgdXNlckRhb1xuICAgICAgICB0aGlzLnVzZXJEYW8uZ2V0VXNlcihxdWVyeSlcbiAgICAgICAgICAgIC50aGVuKCh1c2VyIDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTm93IHdlIGNhbiBkbyBzb21ldGhpbmcgd2l0aCB1c2VyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTm8gaGVybyBmb3VuZCB3aXRoIHRoZSBnaXZlbiBpZC4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyIDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnIubWVzc2FnZVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxufSJdfQ==